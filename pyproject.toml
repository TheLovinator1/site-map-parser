[project]
name = "sitemap-parser"
version = "1.0.0"
description = "This Python library is designed to scrape sitemaps from websites, providing a simple and efficient way to gather information about the structure of a website."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
  "discord-webhook",
  "hishel",
  "httpx[http2]",
  "lxml",
  "python-dateutil",
]

[tool.poetry]
name = "sitemap-parser"
version = "1.0.0"
description = "This Python library is designed to scrape sitemaps from websites, providing a simple and efficient way to gather information about the structure of a website."
authors = ["Joakim Hells√©n <tlovinator@gmail.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "sitemap_parser", from = "."}]

[tool.poetry.dependencies]
python = "^3.11"
hishel = "*"
httpx = {extras = ["http2"], version = "*"}
lxml = "*"
python-dateutil = "*"

[tool.poetry.group.dev.dependencies]
pre-commit = "*"
pytest = "*"
pytest-httpx = "*"
lxml-stubs = {version = "*", optional = true}

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[dependency-groups]
dev = ["lxml-stubs", "pre-commit", "pytest", "pytest-httpx"]

[tool.ruff]
target-version = "py312"
fix = true
unsafe-fixes = true
preview = true
line-length = 120
lint.select = ["ALL"]
lint.pydocstyle.convention = "google"
lint.isort.required-imports = ["from __future__ import annotations"]
lint.ignore = [
  "COM812",
  "CPY001",
  "D100",
  "D104",
  "ERA001",
  "FIX002",
  "G004",
  "ISC001",
  "S320",
  "S405",   # Checks for imports of the xml.etree.cElementTree and xml.etree.ElementTree modules
  "TD002",
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = [
  "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
  "D103",
  "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  "PLR2004",
  "PLR6301",
  "S101",    # asserts allowed in tests...
  "PT001",
]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
